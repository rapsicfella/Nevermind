Enable ingress gateways - https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-control/#determining-the-ingress-ip-and-ports

istioctl command not found -   curl -sL https://istio.io/downloadIstioctl | sh -
                               export PATH=$PATH:$HOME/.istioctl/bin

Patch the master node - kubectl patch node harsha -p "{\"spec\":{\"unschedulable\":false}}"

upstream error:
ku delete pods --all -n istio-system


kubectl logs -l istio=egressgateway -c istio-proxy -n istio-system | tail
istioctl proxy-config cluster -n istio-system istio-ingressgateway-7d6874b48f-qxhn5

==========================================
UNINSTALL K3s

sh /usr/local/bin/k3s-killall.sh

sh /usr/local/bin/k3s-uninstall.sh

==========================================
sudo systemctl status docker
sudo systemctl restart docker
docker run --name kubia-container -p 8080:8080 -d kubia
docker run -it --rm --name kubia-container -p 8080:8080 -d kubia
  ---port 8080 on host machiene is mapped to port 8080 inside the container and -d means it runs in background

  sudo curl localhost:8080 (to listen to http)

  sudo docker inspect kubia-continer - It gives an entire overview about hostport, network settings and other info of container.

  docker exec -it kubia-container bash (to explore running container)

  ps aux(for all processes)

  to push image to dockerhub - 
  step 1, docker tag kubia <dockerhub username>/kubia
  step 2, Login to docker hub - docker login -u <username> -p <password>
  step 3, docker push <dockerhub username>/kubia

  If a container is running on one port, we cant run another on same port

  **sudo alias k=kubectl (or simply add aliases to bashrc and source that).

  ---To create deployment directly -> kubectl create deployment --image kubia:latest kubia

  ---Create replicas ->  kubectl scale deployment kubia --replicas 3
  
  ---To expose the port -> kubectl expose deployment kubia --type=NodePort --port 8080

  ---Additional -> kubectl get pods
                   kubectl get services

docker rm $(docker ps -a -q) (or) docker rmi -f $(docker images -a -q)

**to stop specific port con -> sudo netstat -lnp | grep 10250
and kill the process with id
==================================================================
##To get rid od localhost:8080 error)

sudo kubectl config view --raw > ~/.kube/config 
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
export PATH=$PATH:$HOME/.istioctl/bin
===============================================================
##Create or load gzip or tar files

kubectl label nodes <your-node-name> disktype=ssd
kubectl get nodes --show-labels

docker save nginx:alpine > nginx-amd.tar
docker load -i nginx-amd.tar

docker save od-ms-amd | gzip > od-ms-amd.tar.gz
docker load < busybox.tar.gz
=============================================================
Add stress to system cpu cores:
sudo apt install stress
stress --vm 4 --vm-bytes 1024M --timeout 60
=========================================================

#INSTALL-DOCKER
sudo apt install apt-transport-https ca-certificates curl software-properties-common 
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable" 
sudo apt update 
sudo apt install docker-ce 
sudo usermod -aG docker ${USER} 
su - ${USER} 
-------------------------------------------------------------
#PATCH_DEPLOYMENT_FILE
kubectl patch deployment myapp-deployment -p \
  '{"apiVersion": "v1"}'
 ------------------------------------------------------
host_ip=os.environ["HOST_IP"]
host_endpoint='http://'+host_ip+':5020/HVACWRITE
-----------------------------------------------
#MANIFESTATION
export DOCKER_CLI_EXPERIMENTAL=enabled
docker manifest create --insecure localhost:5000/hvac-manifest-new localhost:5000/hvac-ms localhost:5000/hvac-ms-amd:latest 
docker manifest push --insecure localhost:5000/ota-manifest-new:v1
----------------------------------------------

Install kubectl:

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
echo "$(<kubectl.sha256)  kubectl" | sha256sum --check
sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
kubectl version --client
 ----------------------------------------------
 Prometheus dashboard in grafana - 3119
 --------------------------------------------
##INSTALL-ISTIO
curl -L https://istio.io/downloadIstio | sh -
cd istio-1.12.1
export PATH=$PWD/bin:$PATH
istioctl install --set profile=demo -y
kubectl label namespace default istio-injection=enabled

#FOR REGISTRY ONLY
istioctl install --set profile=demo -y --set components.egressGateways[0].name=istio-egressgateway --set components.egressGateways[0].enabled=true  --set meshConfig.outboundTrafficPolicy.mode=REGISTRY_ONLY
-----------------------------------------
